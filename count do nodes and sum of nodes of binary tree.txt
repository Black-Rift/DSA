#include<iostream>
#include<queue>
using namespace std;
struct node{
    int data;
    struct node* left;
    struct node* right;
   node(int val){
   data=val;
   left=NULL;
   right=NULL;
}
};
int sumatk(node* root, int k){
    if(root==NULL){
        return -1;
    }
    queue<node*> q;
    q.push(root);
    q.push(NULL);
    int level=0;
    int sum=0;
    while(!q.empty()){
        node* n=q.front();
        q.pop();
        if(n!=NULL){
            if(level==k){
                sum+=n->data;
            }
            if(n->left)
                q.push(n->left);
            if(n->right)
                q.push(n->right);
            }

        else if(!q.empty()){
            q.push(NULL);
            level++;
            }
    }
    return sum;
}
int countnodes(node* root){
    if(root==NULL){
        return 0;
    }
    return countnodes(root->left)+countnodes(root->right)+ 1;
}
int sumofroots(node* root){
    if(root==NULL){
        return 0;
    }
    return sumofroots(root->left)+sumofroots(root->right)+ root->data;
}
int main(){
struct node* root= new node(1);
   root->left=new node(2);
   root->right=new node(3);
   root->left->left=new node(4);
   root->left->right=new node(5);
   cout<<sumatk(root, 1)<<endl;
   cout<<countnodes(root)<<endl;
   cout<<sumofroots(root)<<endl;
return 0;
}
