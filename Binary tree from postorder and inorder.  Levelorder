#include<iostream>
#include<queue>
using namespace std;
struct node{
    int data;
    struct node* left;
    struct node* right;
   node(int val){
   data=val;
   left=NULL;
   right=NULL;
}
};
int search(int inorder[], int st, int end, int val){
    for(int i=st;i<=end;i++){
        if(inorder[i]==val){
            return i;
        }
    }
    return -1;
}
node* buildtree(int postorder[],int inorder[],int st, int end){
    static int idx=4;
    if(st>end){
        return NULL;
    }
    int val=postorder[idx];
    idx--;
    node* curr=new node(val);
    if(st==end){
        return curr;
    }
    int pos=search(inorder, st, end, val);
    curr->right=buildtree(postorder, inorder, pos+1, end);
    curr->left=buildtree(postorder, inorder, st, pos-1);
    return curr;
}
void printinorder(node* root){
    if(root==NULL){
        return;
    }
    printinorder(root->left);
    cout<<root->data<<" ";
    printinorder(root->right);
}
void levelorder(node* root){
    if(root==NULL){
        return;
    }
    queue<node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        node* n=q.front();
        q.pop();
        if(n!=NULL){
            cout<<n->data<<" ";
            if(n->left)
            q.push(n->left);
            if(n->right)
            q.push(n->right);
        }
        else if(!q.empty()){
            q.push(NULL);
        }
    }
}
int main(){
int postorder[]={4,2,5,3,1};
int inorder[]={4,2,1,5,3};
node* root=buildtree(postorder, inorder, 0,4);
printinorder(root);
cout<<endl;
levelorder(root);
return 0;
}
